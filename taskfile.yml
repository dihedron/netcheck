version: '3'

vars:
  NAME          : netcheck
  DESCRIPTION   : Simple probe to check network connectivity.
  COPYRIGHT     : 2024 © Andrea Funtò
  LICENSE       : MIT
  LICENSE_URL   : https://opensource.org/license/mit/
  VERSION_MAJOR : 1
  VERSION_MINOR : 0
  VERSION_PATCH : 2
  MAINTAINER    : dihedron.dev@gmail.com
  VENDOR        : dihedron.dev@gmail.com
  RELEASE       : 1
  PRODUCER_URL  : https://github.com/dihedron/
  DOWNLOAD_URL  : '{{.PRODUCER_URL}}netcheck'
  SUPPORTED_PLATFORMS:
    sh: go tool dist list
  VERSION: '{{.VERSION_MAJOR}}.{{.VERSION_MINOR}}.{{.VERSION_PATCH}}'

tasks:

  #
  # defaut is the default task which builds the
  # application for the linux/amd64 platform
  #
  default:
    vars:
      PLATFORM: 'linux/amd64'
    cmds:
      - task: build
        vars:
          PLATFORM: '{{ .PLATFORM }}'
      - task: deb
        vars:
          PLATFORM: '{{ .PLATFORM }}'
      - task: rpm
        vars:
          PLATFORM: '{{ .PLATFORM }}'

  #
  # clean removes all output directies
  #
  clean:
    cmds: 
      - rm -rf dist/

  #
  # build-for builds the application for a list of platforms
  # that must be provided as command line arguments, e.g.
  # as follows: task build-for -- linux/amd64 windows/amd64
  # 
  build-for:
    requires:
      vars: [CLI_ARGS]
    vars:
      PLATFORMS: '{{ .CLI_ARGS }}'
    cmds:
      - for: { var: PLATFORMS }
        task: build
        vars:
          PLATFORM: '{{ .ITEM }}'
      # - for: { var: PLATFORMS }
      #   task: deb
      #   vars:
      #     PLATFORM: '{{ .ITEM }}'
      # - for: { var: PLATFORMS }
      #   task: rpm
      #   vars:
      #     PLATFORM: '{{ .ITEM }}'

  #
  # compress-for compresses the application using UPX for a list of 
  # platforms that must be provided as command line arguments, e.g.
  # as follows: task compress-for -- linux/amd64 windows/amd64
  # 
  compress-for:        
    requires:
      vars: [CLI_ARGS]
    vars:
      PLATFORMS: '{{ .CLI_ARGS }}'
    cmds:
      - for: { var: PLATFORMS }
        task: compress
        vars:
          PLATFORM: '{{ .ITEM }}'

  #
  # package-deb-for packages the application in DEB format for a list 
  # of platforms that must be provided as command line arguments, e.g.
  # as follows: task package-deb-for -- linux/amd64 linux/arm64
  # 
  package-deb-for:        
    requires:
      vars: [CLI_ARGS]
    vars:
      PLATFORMS: '{{ .CLI_ARGS }}'
    cmds:
      - for: { var: PLATFORMS }
        task: deb
        vars:
          PLATFORM: '{{ .ITEM }}'

  #
  # package-rpm-for packages the application in RPM format for a list 
  # of platforms that must be provided as command line arguments, e.g.
  # as follows: task package-rpm-for -- linux/amd64 linux/arm64
  # 
  package-rpm-for:        
    requires:
      vars: [CLI_ARGS]
    vars:
      PLATFORMS: '{{ .CLI_ARGS }}'
    cmds:
      - for: { var: PLATFORMS }
        task: rpm
        vars:
          PLATFORM: '{{ .ITEM }}'

  #
  # release-for builds, compresses and packages in DEB and RPM
  # formats for a list of platforms that must be provided on the
  # command line like this: task release-for -- linux/amd64 linux/arm64
  #
  release-for:
    requires:
      vars: [CLI_ARGS]
    vars:
      PLATFORMS: '{{ .CLI_ARGS }}'
    cmds:
      - for: { var: PLATFORMS }
        task: build
        vars:
          PLATFORM: '{{ .ITEM }}'
      - for: { var: PLATFORMS }
        task: compress
        vars:
          PLATFORM: '{{ .ITEM }}'
      - for: { var: PLATFORMS }
        task: deb
        vars:
          PLATFORM: '{{ .ITEM }}'
      - for: { var: PLATFORMS }
        task: rpm
        vars:
          PLATFORM: '{{ .ITEM }}'

  #
  # build builds the application for a specific PLATFORM;
  # it is an internal task and cannot be invoked directly
  #
  build:
    internal: true
    requires:
      vars: [PLATFORM]
    vars:
      MODULE: 
        sh: grep "module .*" go.mod | sed 's/module //gi'
      PACKAGE: '{{.MODULE}}/version'
      NOW: 
        sh: date --rfc-3339=seconds
      GOOS: '{{ $array := split "/" .PLATFORM }}{{ $array._0 }}'
      GOARCH: '{{ $array := split "/" .PLATFORM }}{{ $array._1 }}'
      GOAMD64: v3
      CGO_ENABLED: 0
    cmds:
      - task: check-platform-support
        vars:
          PLATFORM: '{{ .PLATFORM }}'
      - echo Building {{ .MODULE }} ver. {{ .VERSION }} for {{ .GOOS }}/{{ .GOARCH }}...
      - task: check-vulnerabilities
      - task: run-go-generate
      - task: make-output-dir
        vars:
          PLATFORM: '{{ .PLATFORM }}'
      - CGO_ENABLED={{.CGO_ENABLED}} go build -v -ldflags="-w -s -X '{{.PACKAGE}}.Name={{.NAME}}' -X '{{.PACKAGE}}.Description={{.DESCRIPTION}}' -X '{{.PACKAGE}}.Copyright={{.COPYRIGHT}}' -X '{{.PACKAGE}}.License={{.LICENSE}}' -X '{{.PACKAGE}}.LicenseURL={{.LICENSE_URL}}' -X '{{.PACKAGE}}.BuildTime={{.NOW}}' -X '{{.PACKAGE}}.VersionMajor={{.VERSION_MAJOR}}' -X '{{.PACKAGE}}.VersionMinor={{.VERSION_MINOR}}' -X '{{.PACKAGE}}.VersionPatch={{.VERSION_PATCH}}'" -o dist/{{.PLATFORM}}/ .

  #
  # compress compresse the application for a specific PLATFORM
  # using UPX; it is an internal task and cannot be invoked directly
  #
  compress:
    internal: true
    requires:
      vars: [PLATFORM]
    vars:
      LEVEL: --brute 
      #LEVEL: -9
      GOOS : '{{ $array := split "/" .PLATFORM }}{{ $array._0 }}'
    cmds:
      - if [[ '{{.GOOS}}' = 'windows' ]]; then upx {{.LEVEL}} dist/{{.PLATFORM}}/netcheck.exe; else upx {{.LEVEL}} dist/{{.PLATFORM}}/netcheck; fi 

  #
  # deb packages the application in DEB format; it
  # is an internal task and cannot be invoked directly
  #
  deb:
    internal: true
    requires:
      vars: [PLATFORM]
    vars: 
      PLATFORM: '{{.PLATFORM}}'
      VERSION : '{{.VERSION}}'
      GOOS: '{{ $array := split "/" .PLATFORM }}{{ $array._0 }}'
      GOARCH: '{{ $array := split "/" .PLATFORM }}{{ $array._1 }}'
    cmds: 
      - if [[ '{{.GOOS}}' = 'linux' ]]; then VERSION={{.VERSION}} GOOS={{.GOOS}} GOARCH={{.GOARCH}} PLATFORM={{.PLATFORM}} nfpm package --packager deb --target dist/{{.PLATFORM}}; fi

  #
  # rpm packages the application in RPM format; it
  # is an internal task and cannot be invoked directly
  #
  rpm:
    internal: true
    requires:
      vars: [PLATFORM]
    vars:
      PLATFORM: '{{.PLATFORM}}'
      VERSION : '{{.VERSION}}'
      GOOS: '{{ $array := split "/" .PLATFORM }}{{ $array._0 }}'
      GOARCH: '{{ $array := split "/" .PLATFORM }}{{ $array._1 }}'
    cmds: 
      - if [[ '{{.GOOS}}' = 'linux' ]]; then VERSION={{.VERSION}} GOOS={{.GOOS}} GOARCH={{.GOARCH}} PLATFORM={{.PLATFORM}} nfpm package --packager rpm --target dist/{{.PLATFORM}}; fi

  #
  # check-platform-support checks if the provided platform is among 
  # those supported by the golang compiler; it is an internal task
  # and cannot be invoked directly
  #
  check-platform-support:
    internal: true
    requires:
      vars: [PLATFORM]
    vars:
      SUPPORTED: '{{ $ALL_PLATFORMS := splitList "\n" .SUPPORTED_PLATFORMS }} {{ has .PLATFORM $ALL_PLATFORMS }}'
    cmds: 
      - echo 'Is platform {{ .PLATFORM }} supported? {{- .SUPPORTED }}'
      - if {{- .SUPPORTED }}; then exit 0; else exit 1; fi 
      
  #
  # check-vulnerabilities runs govulncheck agains the project dependencies
  # to check if there re any outstanding vulnerabilities
  #
  check-vulnerabilities:
    run: once
    cmds:
      - govulncheck ./...

  #
  # run-go-generate runs go generate against the sources
  #
  run-go-generate:
    run: once
    cmds:
      - go generate ./...

  #
  # make-output-dir creates the output directory for the given 
  # platform; it is an internal task and cannot be invoked directly
  #
  make-output-dir:
    requires:
      vars: [PLATFORM]
    status:
      - test -d dist/{{ .PLATFORM }}
    cmds:
      - echo creating directy
      - mkdir -p dist/{{ .PLATFORM }}

  #
  # setup-tools installs all the required tools
  #
  setup-tools:
    cmds:
      - go install golang.org/x/vuln/cmd/govulncheck@latest
      - go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
