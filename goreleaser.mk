#
# This value is updated each time a new feature is added
# to the golang.mk targets and build rules file.
#
_GORELEASER_MK_CURRENT_VERSION := 202508221500
ifeq ($(_GORELEASER_MK_MINIMUM_VERSION),)
	_GORELEASER_MK_MINIMUM_VERSION := 0
endif

#
# Test if minimum golang.mk version requirement is met
#
ifneq ($(shell test $(_GORELEASER_MK_CURRENT_VERSION) -ge $(_GORELEASER_MK_MINIMUM_VERSION); echo $$?),0)
	@echo "minimum goreleaser.mk version requirement not met (expected at least $(_GORELEASER_MK_MINIMUM_VERSION), got $(_GORELEASER_MK_CURRENT_VERSION))" && exit 1
endif

#
# Extract application variable values from Makefile global context
# into goreleaser.mk specific variables if available.
#
ifdef _APPLICATION_NAME
	_GORELEASER_MK_VARS_NAME ?= $(_APPLICATION_NAME)
endif
ifdef _APPLICATION_VERSION
	_GORELEASER_MK_VARS_VERSION ?= $(_APPLICATION_VERSION)
else
	_GORELEASER_MK_VARS_VERSION := $$(git describe --tags $$(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
endif
ifdef _APPLICATION_DESCRIPTION
	_GORELEASER_MK_VARS_DESCRIPTION ?= $(_APPLICATION_DESCRIPTION)
endif
ifdef _APPLICATION_COPYRIGHT
	_GORELEASER_MK_VARS_COPYRIGHT ?= $(_APPLICATION_COPYRIGHT)
endif
ifdef _APPLICATION_LICENSE
	_GORELEASER_MK_VARS_LICENSE ?= $(_APPLICATION_LICENSE)
endif
ifdef _APPLICATION_LICENSE_URL
	_GORELEASER_MK_VARS_LICENSE_URL ?= $(_APPLICATION_LICENSE_URL)
endif
ifdef _APPLICATION_MAINTAINER
	_GORELEASER_MK_VARS_MAINTAINER ?= $(_APPLICATION_MAINTAINER)
endif
ifdef _APPLICATION_VENDOR
	_GORELEASER_MK_VARS_VENDOR ?= $(_APPLICATION_VENDOR)
endif
ifdef _APPLICATION_PRODUCER_URL
	_GORELEASER_MK_VARS_PRODUCER_URL ?= $(_APPLICATION_PRODUCER_URL)
endif
ifdef _APPLICATION_DOWNLOAD_URL
	_GORELEASER_MK_VARS_DOWNLOAD_URL ?= $(_APPLICATION_DOWNLOAD_URL)
endif
ifdef _APPLICATION_METADATA_PACKAGE
	_GORELEASER_MK_VARS_METADATA_PACKAGE ?= $(_APPLICATION_METADATA_PACKAGE)
endif
ifdef _APPLICATION_DOTENV_VAR_NAME
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME ?= $(_APPLICATION_DOTENV_VAR_NAME)
endif

#
# fill undefined variables with default values
#
_GORELEASER_MK_VARS_NAME ?= my-app
_GORELEASER_MK_VARS_DESCRIPTION ?= <Provide your description here>
_GORELEASER_MK_VARS_COPYRIGHT ?= <20XX> Â© <your name>
_GORELEASER_MK_VARS_LICENSE ?= MIT
_GORELEASER_MK_VARS_LICENSE_URL ?= https://opensource.org/license/mit/
_GORELEASER_MK_VARS_MAINTAINER ?= <your-email>@gmail.com
_GORELEASER_MK_VARS_VENDOR ?= <your-email>@gmail.com
_GORELEASER_MK_VARS_PRODUCER_URL ?= https://github.com/<your-github-username>/
_GORELEASER_MK_VARS_DOWNLOAD_URL ?= $(_GORELEASER_MK_VARS_PRODUCER_URL)$(_GORELEASER_MK_VARS_NAME)
_GORELEASER_MK_VARS_METADATA_PACKAGE ?= $$(grep "module .*" go.mod | sed 's/module //gi')/metadata
_GORELEASER_MK_VARS_DOTENV_VAR_NAME ?= $$(echo $(_GORELEASER_MK_VARS_NAME) | tr '[:lower:]' '[:upper:]' | tr '-' '_')_DOTENV

#
# GoReleaser version
#
_GORELEASER_VERSION := $(shell goreleaser --version | grep 'GitVersion:' | awk '{print $$2}')

#
# show all the externally set build variables
#
.PHONY: goreleaser-show-vars
goreleaser-show-vars: ## show goreleaser metadata variables
	@echo "_GORELEASER_VERSION=${_GORELEASER_VERSION}"
	@echo "_GORELEASER_MK_VARS_NAME=${_GORELEASER_MK_VARS_NAME}"
	@echo "_GORELEASER_MK_VARS_VERSION=${_GORELEASER_MK_VARS_VERSION}"
	@echo "_GORELEASER_MK_VARS_DESCRIPTION=${_GORELEASER_MK_VARS_DESCRIPTION}"
	@echo "_GORELEASER_MK_VARS_COPYRIGHT=${_GORELEASER_MK_VARS_COPYRIGHT}"
	@echo "_GORELEASER_MK_VARS_LICENSE=${_GORELEASER_MK_VARS_LICENSE}"
	@echo "_GORELEASER_MK_VARS_LICENSE_URL=${_GORELEASER_MK_VARS_LICENSE_URL}"
	@echo "_GORELEASER_MK_VARS_MAINTAINER=${_GORELEASER_MK_VARS_MAINTAINER}"
	@echo "_GORELEASER_MK_VARS_VENDOR=${_GORELEASER_MK_VARS_VENDOR}"
	@echo "_GORELEASER_MK_VARS_PRODUCER_URL=${_GORELEASER_MK_VARS_PRODUCER_URL}"
	@echo "_GORELEASER_MK_VARS_DOWNLOAD_URL=${_GORELEASER_MK_VARS_DOWNLOAD_URL}"
	@echo "_GORELEASER_MK_VARS_METADATA_PACKAGE=${_GORELEASER_MK_VARS_METADATA_PACKAGE}"
	@echo "_GORELEASER_MK_VARS_DOTENV_VAR_NAME=${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}"

#
# create a goreleaser snaphot build
#
.PHONY: goreleaser-snapshot 
goreleaser-snapshot: ## snapshot build using goreleaser
	@echo "Building snapshot release with goreleaser..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser release --snapshot --clean

#
# create a goreleaser development build (single platform)
#
.PHONY: goreleaser-dev 
goreleaser-dev: ## development build using goreleaser with current GOOS/GOARCH
	@echo "Building snapshot release with goreleaser..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser build --single-target --snapshot --clean

#
# build and release the application to github
#
.PHONY: goreleaser-release
goreleaser-release: ## release build using goreleaser
	@echo "Building release with goreleaser..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser release --clean

#
# build for all platforms using goreleaser
#
.PHONY: goreleaser-build
goreleaser-build: ## build using goreleaser
	@echo "Building with goreleaser ($(_GORELEASER_MK_VARS_NAME))..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser build --snapshot --clean --single-target

#
# dry-run the goreleaser build; requires a clean git repo
#
.PHONY: goreleaser-dry-run
goreleaser-dry-run: ## dry run of the goreleaser build
	@echo "Running goreleaser dry run..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser release --clean --skip=publish	

#
# check the current goreleaser configuration
#
.PHONY: goreleaser-check-configuration
goreleaser-check-configuration: ## check the goreleaser configuration
	@echo "Checking goreleaser configuration..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser check

#
# clean up all built binaries
#
.PHONY: goreleaser-clean
goreleaser-clean: ## clean the goreleaser dist directory	
	@echo "Cleaning goreleaser dist directory..."
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	_GORELEASER_VERSION=${_GORELEASER_VERSION} \
	goreleaser --clean

#
# remove all cached pre-built libraries from compiler cache
#
.PHONY: goreleaser-purge
goreleaser-purge: ## remove all cached Golang build entries
	@go clean -x -cache

#
# goreleaser-supported-platforms shows all platforms supported as targets by the golang compiler.
#
.PHONY: goreleaser-supported-platforms
goreleaser-supported-platforms: ## show supported build platforms
	@echo -e "Supported build platforms:"
	@OS=$$(uname -s); \
	OS=$${OS,,}; \
	ARCH=$$(uname -p); \
	if [ "$$ARCH" = "x86_64" ]; then \
		ARCH=amd64; \
	fi; \
	mapfile -t PLATFORMS < <(go tool dist list); \
	for platform in "$${PLATFORMS[@]}"; do \
		if [ "$$OS/$$ARCH" = "$$platform" ]; then \
			echo -e " [*] $$platform (current)"; \
		else \
			echo -e " [ ] $$platform"; \
		fi; \
	done

#
# goreleaser-howto-tag shows a reminder on how to tag properly before release.
#
.PHONY: goreleaser-howto-tag
goreleaser-howto-tag: ## show how to set a tag before releaser
	@echo "git tag -a v1.2.3 -m \"Your message here\""
	@echo "make [goreleaser-]release"

#
# goreleaser-check-installed checks if goreleaser is installed and at which version.
#
.PHONY: goreleaser-check-installed
goreleaser-check-installed: ## check if goreleaser is installed
ifeq (, $(shell which goreleaser))
	@echo -e "Install goreleaser first"
else
	@echo -e "goreleaser ver. $(_GORELEASER_VERSION) available"
endif

