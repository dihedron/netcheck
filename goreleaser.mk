#
# This value is updated each time a new feature is added
# to the golang.mk targets and build rules file.
#
_GORELEASER_MK_CURRENT_VERSION := 202508221500
ifeq ($(_GORELEASER_MK_MINIMUM_VERSION),)
	_GORELEASER_MK_MINIMUM_VERSION := 0
endif

#
# Test if minimum golang.mk version requirement is met
#
ifneq ($(shell test $(_GORELEASER_MK_CURRENT_VERSION) -ge $(_GORELEASER_MK_MINIMUM_VERSION); echo $$?),0)
	@echo "minimum goreleaser.mk version requirement not met (expected at least $(_GORELEASER_MK_MINIMUM_VERSION), got $(_GORELEASER_MK_CURRENT_VERSION))" && exit 1
endif

#
# Extract application variable values from Makefile global context
# into goreleaser.mk specific variables if available.
#
ifdef _APPLICATION_NAME
	_GORELEASER_MK_VARS_NAME ?= $(_APPLICATION_NAME)
endif
ifdef _APPLICATION_DESCRIPTION
	_GORELEASER_MK_VARS_DESCRIPTION ?= $(_APPLICATION_DESCRIPTION)
endif
ifdef _APPLICATION_COPYRIGHT
	_GORELEASER_MK_VARS_COPYRIGHT ?= $(_APPLICATION_COPYRIGHT)
endif
ifdef _APPLICATION_LICENSE
	_GORELEASER_MK_VARS_LICENSE ?= $(_APPLICATION_LICENSE)
endif
ifdef _APPLICATION_LICENSE_URL
	_GORELEASER_MK_VARS_LICENSE_URL ?= $(_APPLICATION_LICENSE_URL)
endif
ifdef _APPLICATION_MAINTAINER
	_GORELEASER_MK_VARS_MAINTAINER ?= $(_APPLICATION_MAINTAINER)
endif
ifdef _APPLICATION_VERSION_MAJOR
	_GORELEASER_MK_VARS_VERSION_MAJOR ?= $(_APPLICATION_VERSION_MAJOR)
endif
ifdef _APPLICATION_VERSION_MINOR
	_GORELEASER_MK_VARS_VERSION_MINOR ?= $(_APPLICATION_VERSION_MINOR)
endif
ifdef _APPLICATION_VERSION_PATCH
	_GORELEASER_MK_VARS_VERSION_PATCH ?= $(_APPLICATION_VERSION_PATCH)
endif
ifdef _APPLICATION_VERSION
	_GORELEASER_MK_VARS_VERSION ?= $(_APPLICATION_VERSION)
endif
ifdef _APPLICATION_VENDOR
	_GORELEASER_MK_VARS_VENDOR ?= $(_APPLICATION_VENDOR)
endif
ifdef _APPLICATION_PRODUCER_URL
	_GORELEASER_MK_VARS_PRODUCER_URL ?= $(_APPLICATION_PRODUCER_URL)
endif
ifdef _APPLICATION_DOWNLOAD_URL
	_GORELEASER_MK_VARS_DOWNLOAD_URL ?= $(_APPLICATION_DOWNLOAD_URL)
endif
ifdef _APPLICATION_METADATA_PACKAGE
	_GORELEASER_MK_VARS_METADATA_PACKAGE ?= $(_APPLICATION_METADATA_PACKAGE)
endif
ifdef _APPLICATION_DOTENV_VAR_NAME
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME ?= $(_APPLICATION_DOTENV_VAR_NAME)
endif

#
# default application metadata
#
_GORELEASER_MK_VARS_NAME ?= my-app
_GORELEASER_MK_VARS_DESCRIPTION ?= <Provide your description here>
_GORELEASER_MK_VARS_COPYRIGHT ?= <20XX> Â© <your name>
_GORELEASER_MK_VARS_LICENSE ?= MIT
_GORELEASER_MK_VARS_LICENSE_URL ?= https://opensource.org/license/mit/
_GORELEASER_MK_VARS_VERSION_MAJOR ?= 0
_GORELEASER_MK_VARS_VERSION_MINOR ?= 0
_GORELEASER_MK_VARS_VERSION_PATCH ?= 1
_GORELEASER_MK_VARS_VERSION ?= $(_GORELEASER_MK_VARS_VERSION_MAJOR).$(_GORELEASER_MK_VARS_VERSION_MINOR).$(_GORELEASER_MK_VARS_VERSION_PATCH)
_GORELEASER_MK_VARS_MAINTAINER ?= <your-email>@gmail.com
_GORELEASER_MK_VARS_VENDOR ?= <your-email>@gmail.com
_GORELEASER_MK_VARS_PRODUCER_URL ?= https://github.com/<your-github-username>/
_GORELEASER_MK_VARS_DOWNLOAD_URL ?= $(_GORELEASER_MK_VARS_PRODUCER_URL)$(_GORELEASER_MK_VARS_NAME)
_GORELEASER_MK_VARS_METADATA_PACKAGE ?= $$(grep "module .*" go.mod | sed 's/module //gi')/metadata
_GORELEASER_MK_VARS_DOTENV_VAR_NAME ?= $$(echo $(_GORELEASER_MK_VARS_NAME) | tr '[:lower:]' '[:upper:]' | tr '-' '_')_DOTENV



.PHONY: goreleaser-snapshot 
goreleaser-snapshot: ## snapshot build using goreleaser
	@echo "Building snapshot release with goreleaser..."
	@goreleaser release --snapshot --clean

.PHONY: goreleaser-dev 
goreleaser-dev: ## development build using goreleaser with current GOOS/GOARCH
	@echo "Building snapshot release with goreleaser..."
	@echo "_GORELEASER_MK_VARS_NAME=${_GORELEASER_MK_VARS_NAME}"
	@echo "_GORELEASER_MK_VARS_DESCRIPTION=${_GORELEASER_MK_VARS_DESCRIPTION}"
	@echo "_GORELEASER_MK_VARS_COPYRIGHT=${_GORELEASER_MK_VARS_COPYRIGHT}"
	@echo "_GORELEASER_MK_VARS_LICENSE=${_GORELEASER_MK_VARS_LICENSE}"
	@echo "_GORELEASER_MK_VARS_LICENSE_URL=${_GORELEASER_MK_VARS_LICENSE_URL}"
	@echo "_GORELEASER_MK_VARS_VERSION_MAJOR=${_GORELEASER_MK_VARS_VERSION_MAJOR}"
	@echo "_GORELEASER_MK_VARS_VERSION_MINOR=${_GORELEASER_MK_VARS_VERSION_MINOR}"
	@echo "_GORELEASER_MK_VARS_VERSION_PATCH=${_GORELEASER_MK_VARS_VERSION_PATCH}"
	@echo "_GORELEASER_MK_VARS_VERSION=${_GORELEASER_MK_VARS_VERSION}"
	@echo "_GORELEASER_MK_VARS_MAINTAINER=${_GORELEASER_MK_VARS_MAINTAINER}"
	@echo "_GORELEASER_MK_VARS_VENDOR=${_GORELEASER_MK_VARS_VENDOR}"
	@echo "_GORELEASER_MK_VARS_PRODUCER_URL=${_GORELEASER_MK_VARS_PRODUCER_URL}"
	@echo "_GORELEASER_MK_VARS_DOWNLOAD_URL=${_GORELEASER_MK_VARS_DOWNLOAD_URL}"
	@echo "_GORELEASER_MK_VARS_METADATA_PACKAGE=${_GORELEASER_MK_VARS_METADATA_PACKAGE}"
	@echo "_GORELEASER_MK_VARS_DOTENV_VAR_NAME=${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}"
	@env	
	@_GORELEASER_MK_VARS_NAME="${_GORELEASER_MK_VARS_NAME}" \
	_GORELEASER_MK_VARS_DESCRIPTION="${_GORELEASER_MK_VARS_DESCRIPTION}" \
	_GORELEASER_MK_VARS_COPYRIGHT="${_GORELEASER_MK_VARS_COPYRIGHT}" \
	_GORELEASER_MK_VARS_LICENSE="${_GORELEASER_MK_VARS_LICENSE}" \
	_GORELEASER_MK_VARS_LICENSE_URL="${_GORELEASER_MK_VARS_LICENSE_URL}" \
	_GORELEASER_MK_VARS_VERSION_MAJOR="${_GORELEASER_MK_VARS_VERSION_MAJOR}" \
	_GORELEASER_MK_VARS_VERSION_MINOR="${_GORELEASER_MK_VARS_VERSION_MINOR}" \
	_GORELEASER_MK_VARS_VERSION_PATCH="${_GORELEASER_MK_VARS_VERSION_PATCH}" \
	_GORELEASER_MK_VARS_VERSION="${_GORELEASER_MK_VARS_VERSION}" \
	_GORELEASER_MK_VARS_MAINTAINER="${_GORELEASER_MK_VARS_MAINTAINER}" \
	_GORELEASER_MK_VARS_VENDOR="${_GORELEASER_MK_VARS_VENDOR}" \
	_GORELEASER_MK_VARS_PRODUCER_URL="${_GORELEASER_MK_VARS_PRODUCER_URL}" \
	_GORELEASER_MK_VARS_DOWNLOAD_URL="${_GORELEASER_MK_VARS_DOWNLOAD_URL}" \
	_GORELEASER_MK_VARS_METADATA_PACKAGE="${_GORELEASER_MK_VARS_METADATA_PACKAGE}" \
	_GORELEASER_MK_VARS_DOTENV_VAR_NAME="${_GORELEASER_MK_VARS_DOTENV_VAR_NAME}" \
	goreleaser build --single-target --snapshot --clean

.PHONY: goreleaser-release
goreleaser-release: ## release build using goreleaser
	@echo "Building release with goreleaser..."
	@goreleaser release

.PHONY: goreleaser-build
goreleaser-build: ## build using goreleaser
	@echo "Building with goreleaser ($(_GORELEASER_MK_VARS_NAME))..."
	@GOOS=linux GOARCH=amd64 _GOLANG_MK_VARS_NAME=pippo goreleaser build --snapshot --clean --single-target

.PHONY: goreleaser-dry-run
goreleaser-dry-run: ## dry run of the goreleaser build
	@echo "Running goreleaser dry run..."
	@goreleaser release --rm-dist --debug	

.PHONY: goreleaser-check
goreleaser-check: ## check the goreleaser configuration
	@echo "Checking goreleaser configuration..."
	@goreleaser check

.PHONY: goreleaser-clean
goreleaser-clean: ## clean the goreleaser dist directory	
	@echo "Cleaning goreleaser dist directory..."
	@goreleaser clean

.PHONY: goreleaser
goreleaser: goreleaser-snapshot ## default target for goreleaser, builds a snapshot release
